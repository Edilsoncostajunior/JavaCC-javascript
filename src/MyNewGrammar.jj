PARSER_BEGIN(MyNewGrammar)

import java.io.ByteArrayInputStream;
import java.io.BufferedReader;

import java.io.FileReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;


public class MyNewGrammar{
  public static void main(String []args ) throws ParseException{

      // inicio
      // Criar um seletor de arquivos
       JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
       fileChooser.setDialogTitle("Selecione o arquivo que vai ser compilado na linguagem javascript");

       // Definir filtro para arquivos .txt
       FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
       fileChooser.setFileFilter(filter);

       // Mostrar o diálogo de abertura; este método não retorna até que o diálogo seja fechado
       int result = fileChooser.showOpenDialog(null);

       // Se o usuário selecionar um arquivo
        if (result == JFileChooser.APPROVE_OPTION) {
            final String path = fileChooser.getSelectedFile().getPath();

            try (InputStream inputStream = new FileInputStream(path);
                 BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

                // Ler todo o conteúdo do arquivo em uma string
                StringBuilder contentBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    contentBuilder.append(line).append("\n");
                }

                String fileContent = contentBuilder.toString();

                // Inicializar o parser com o conteúdo do arquivo
                InputStream fileStream = new ByteArrayInputStream(fileContent.getBytes());
                MyNewGrammar parser = new MyNewGrammar(fileStream);
                System.out.println("Arquivo carregado: " + path);
                System.out.println("Conteúdo do arquivo:\n" + fileContent);

                // Processar o conteúdo do arquivo
                try {
                    int input = parser.one_line();
                    while (input != -1) { //  Sinal de fim de entrada fornecido pelo analisador

                        if (input == 0) {
                            System.out.println("OK.");
                        } else if (input == 1) {
                            System.out.println("Tchau.");
                            break;
                        } else {
                            System.out.println("Entrada inesperada: " + input);
                        }
                        input = parser.one_line();
                    }
                    System.out.println("Análise concluída com êxito.");
                } catch (ParseException e) {
                    System.out.println("Erro NOK.");
                    System.out.println(e.getMessage());
                } catch (Error e) {
                    System.out.println("Oops.");
                    System.out.println(e.getMessage());
                }
            } catch (FileNotFoundException e) {
                System.out.println("Arquivo não encontrado: " + path);
            } catch (IOException e) {
                System.out.println("Erro de IO: " + e.getMessage());
            }
        } else {
            System.out.println("Nenhum arquivo selecionado. Saindo.");
        }
// Fim de arquivo
/*
       MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter any expression from javascript :");
      try
      {
          if (MyNewGrammar.one_line() == 0){
            System.out.println("OK.");
            break;
          }else if(MyNewGrammar.one_line() == 1){
            System.out.println("Goodbye.");
            break;
          }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }*/
  }
}
PARSER_END(MyNewGrammar)

// Espaços em branco
SKIP : {
  " " | "\r" | "\t" | "\n"
}

// Operadores
TOKEN : {
    <ATRIBUICAO: "=" > { System.out.println("Operador de Atribuicao: " + image); }
  | <MAIOR: ">" > { System.out.println("Operador de maior: " + image); }
  | <MENOR: "<" > { System.out.println("Operador de menor: " + image); }
  | <NEGACAO: "!" > { System.out.println("Operador de exclamação: " + image); }
  | <DOIS_PONTOS: ":" > { System.out.println("Operador de dois pontos: " + image); }
  | <IGUAL: "==" > { System.out.println("Operador de igual igual: " + image); }
  | <ESTRITAMENTE_IGUAL: "===" > { System.out.println("Operador de estritamente igual: " + image); }
  | <MENOR_IGUAL: "<=" > { System.out.println("Operador de menor igual: " + image); }
  | <MAIOR_IGUAL: ">=" > { System.out.println("Operador de maior igual: " + image); }
  | <DIFERENTE: "!=" > { System.out.println("Operador de diferente: " + image); }
  | <ESTRITAMENTE_DIFERENTE: "!==" > { System.out.println("Operador de estritamente diferente: " + image); }
  | <OR: "||" > { System.out.println("Operador de OR: " + image); }
  | <AND: "&&" > { System.out.println("Operador de AND: " + image); }
  | <INCREMENTO: "++" > { System.out.println("Operador de incremento: " + image); }
  | <DECREMENTO: "--" > { System.out.println("Operador de decremento: " + image); }
  | <MAIS: "+" > { System.out.println("Operador de mais: " + image); }
  | <MENOS: "-" > { System.out.println("Operador de menos: " + image); }
  | <ASTERISCO: "*" > { System.out.println("Operador de asterisco: " + image); }
  | <BARRA: "/" > { System.out.println("Operador de barra: " + image); }
  | <PORCENTO: "%" > { System.out.println("Operador de porcento: " + image); }
  | <MAIS_IGUAL: "+=" > { System.out.println("Operador de mais igual: " + image); }
  | <MENOS_IGUAL: "-=" > { System.out.println("Operador de menos igual: " + image); }
  | <ASTERISCO_IGUAL: "*=" > { System.out.println("Operador de asterisco igual: " + image); }
  | <BARRA_IGUAL: "/=" > { System.out.println("Operador de barra igual: " + image); }
  | <PORCENTO_IGUAL: "%=" > { System.out.println("Operador de porcento igual: " + image); }
}
// Delimitadores
TOKEN : {
    <ABRE_PARENTESES: "("> { System.out.println("Abre Parênteses: " + image); }
  | <FECHA_PARENTESES: ")"> { System.out.println("Fecha Parênteses: " + image); }
  | <ABRE_CHAVE: "{"> { System.out.println("Abre Chave: " + image); }
  | <FECHA_CHAVE: "}"> { System.out.println("Fecha Chave: " + image); }
  | <ABRE_COLCHETE: "["> { System.out.println("Abre Colchete: " + image); }
  | <FECHA_COLCHETE: "]"> { System.out.println("Fecha Colchete: " + image); }
  | <PONTO_VIRGULA: ";"> { System.out.println("Ponto e Vírgula: " + image); }
  | <VIRGULA: ","> { System.out.println("Vírgula: " + image); }
  | <PONTO: "."> { System.out.println("Ponto: " + image); }
}

// Palavras reservadas
TOKEN : {
    <CLASS: "class"> { System.out.println("Palavra Reservada: " + image); }
  | <NAN: "NaN"> { System.out.println("Palavra Reservada: " + image); }
  | <VOID: "void"> { System.out.println("Palavra Reservada: " + image); }
  | <RETURN: "return"> { System.out.println("Palavra Reservada: " + image); }
  | <STATIC: "static"> { System.out.println("Palavra Reservada: " + image); }
  | <IF: "if"> { System.out.println("Palavra Reservada: " + image); }
  | <ELSE: "else"> { System.out.println("Palavra Reservada: " + image); }
  | <CONSOLE: "console"> { System.out.println("Palavra Reservada: " + image); }
  | <LOG: "log"> { System.out.println("Palavra Reservada: " + image); }
  | <PROMPT: "prompt"> { System.out.println("Palavra Reservada: " + image); }
  | <WHILE: "while"> { System.out.println("Palavra Reservada: " + image); }
  | <BREAK: "break"> { System.out.println("Palavra Reservada: " + image); }
  | <CONTINUE: "continue"> { System.out.println("Palavra Reservada: " + image); }
  | <FUNCTION: "function"> { System.out.println("Palavra Reservada: " + image); }
  | <AWAIT: "await"> { System.out.println("Palavra Reservada: " + image); }
  | <IMPORT: "import" > { System.out.println("Palavra Reservada: " + image);}
  | <FROM: "from" > { System.out.println("Palavra Reservada: " + image);}
}

// Tipos primitivos e literais
TOKEN : {
    <STRING_LITERAL: "\"" (~["\"","\\"] | "\\" ["\"","\\","b","f","n","r","t"])* "\"" |
                     "'" (~["'","\\"] | "\\" ["'","\\","b","f","n","r","t"])* "'"> { System.out.println("String Literal: " + image); }
  | <NUMBER: (["0"-"9"])* "." (["0"-"9"])+ | (["0"-"9"])+ > { System.out.println("Número: " + image); }
  | <BIGINT: (["0"-"9"])+ "n"> { System.out.println("BigInt: " + image); }
  | <UNDEFINED: "undefined"> { System.out.println("Tipo Undefined: " + image); }
  | <NULL: "null"> { System.out.println("Palavra Reservada: " + image); }
  | <TRUE: "true"> { System.out.println("Tipo Booleano true: " + image); }
  | <FALSE:"false"> { System.out.println("Tipo Booleano false: " + image); }
  | <SYMBOL: "Symbol" "(" (~["\"","\\"] | "\\" ["\"","\\","b","f","n","r","t"])* ")"> { System.out.println("Tipo Symbol: " + image); }
}

// Declaração de variáveis
TOKEN : {
    <LET: "let"> { System.out.println("Declaração let: " + image); }
  | <VAR: "var"> { System.out.println("Declaração var: " + image); }
  | <CONST: "const"> { System.out.println("Declaração const: " + image); }

}

TOKEN:
{
		<IDENTIFIER:
		(<LETRA> | <ESPECIAL> ) (<LETRA> | <DIGITO> | <ESPECIAL> )* >
		{
		  System.out.println("Identificador: " +image);
		}

	|	<#LETRA: (["a"-"z", "A"-"Z"])>
	| 	<#DIGITO: ["0"-"9"]>
	|   <#ESPECIAL:(["_", "$", "ª", "º"])>
}

// comentarios
TOKEN : {
    <MULTI_LINE_COMMENT : "/*" ( ~["*"] | "*" ~["/"] )* "*/" > { System.out.println("Comentario em bloco: " + image); }
   |<SINGLE_LINE_COMMENT : "//" (~["\n", "\r"])* >{ System.out.println("Comentario simples: " + image); }
}

TOKEN : {
    <CONSTANT : (<DIGIT>)+>
  | <#DIGIT : ["0"-"9"]>
}
// Regras gramaticais
void program() : {} {
    consoleLog()
    | (LOOKAHEAD(2) functionCall()
    | LOOKAHEAD(2) variableDeclaration() | expressao())
    | conditional()
    | whileRepeat()
    | functionDeclaration()
    | < MULTI_LINE_COMMENT >
    | <SINGLE_LINE_COMMENT>
    | functionReturn()
    | importDeclaration()

}

void consoleLog() : {} {
    <CONSOLE> <PONTO> <LOG> <ABRE_PARENTESES> argumentList() <FECHA_PARENTESES>
}

void argumentList() : {} {
    (value() ( <VIRGULA> value() )*)?
}

void variableDeclaration() : {} {
    ( <LET> | <VAR> | <CONST> )? <IDENTIFIER> assignment()

}

void assignment() : {} {
    (<ATRIBUICAO> expressao() )? (<VIRGULA> <IDENTIFIER> (<ATRIBUICAO> expressao())? )*
}

void expressao():{}{
    preIncrementoOuDecremento()
    | avaliarTermoLogico() ( logisticOperator() avaliarTermoLogico() )*
}

void complementoComparacao():{}{
    [ (<MENOR>| <MAIOR> |<MENOR_IGUAL> |<MAIOR_IGUAL> |<IGUAL>|<DIFERENTE>) criarItem() ]
}

void avaliarTermoLogico():{}{
    criarItem()  complementoComparacao()
}

void criarItem():{} {
   definirTermo() (("+"|"-") definirTermo() )*
}

void definirTermo():{} {
    itemUnico() (("*"|"/"|"%") itemUnico() )*
}

void itemUnico():{} {
    [("+"|"-")] value()
    | "(" expressao() ")"
}

void preIncrementoOuDecremento(): {} {
     (<INCREMENTO> | <DECREMENTO>) <IDENTIFIER>
}

void posIncrementoOuDecremento(): {} {
      <IDENTIFIER> (<INCREMENTO> | <DECREMENTO>)
}

void chamadaPrePosIncremento(): {} {
    preIncrementoOuDecremento() | posIncrementoOuDecremento()
}

void functionDeclaration() : {} {
    <FUNCTION> <IDENTIFIER> <ABRE_PARENTESES> [functionParameterList()] <FECHA_PARENTESES> <ABRE_CHAVE> (program())*  <FECHA_CHAVE>
}

/*void functionDeclaration() : {} {
    <FUNCTION> <IDENTIFIER> <ABRE_PARENTESES> parameterList() <FECHA_PARENTESES> <ABRE_CHAVE> (assignment() | functionCall())* <FECHA_CHAVE>
}*/

void functionReturn() : {} {
    <RETURN> ( LOOKAHEAD(2) consoleLog() | value())
}

void parameterList() : {} {
    ( <IDENTIFIER> ( <VIRGULA> <IDENTIFIER> )* )?
}

void functionParameterList() : {} {
     parameter() ( <VIRGULA> parameter() )*
    //(LOOKAHEAD(2) functionCall()| parameter() ) ( <VIRGULA> (LOOKAHEAD(2) functionCall()| parameter2() ))*
}

void parameter() : {} {
   // LOOKAHEAD(2) value() | singleassignment() /* functionCall()*/
   <IDENTIFIER> ( <ATRIBUICAO> value())? /*| functionCall()*/
}

void functionArgumentsList() : {} {
   <IDENTIFIER> ( <ATRIBUICAO> value() | <ABRE_PARENTESES>  [functionArgumentsList()] ( <VIRGULA> functionArgumentsList() )* <FECHA_PARENTESES>)?
   | <NUMBER>
   | <TRUE>
   | <FALSE>
   | <NULL>
   | <UNDEFINED>
   | <STRING_LITERAL>
}

void functionCall() : {} {
    //<IDENTIFIER> <ABRE_PARENTESES> [ functionParameterList() ] <FECHA_PARENTESES> (<PONTO_VIRGULA>)?
    <IDENTIFIER> <ABRE_PARENTESES>  [functionArgumentsList()] ( <VIRGULA> functionArgumentsList() )* <FECHA_PARENTESES> (<PONTO_VIRGULA>)?
}

/*void functionParameterList() : {} {
     LOOKAHEAD(2) value() ( <VIRGULA> value() | <ATRIBUICAO> value() )* | functionCall()
}

// a,b,c ou a= 2, b="frase", c=null

void functionCall() : {} {
    <IDENTIFIER> <ABRE_PARENTESES> (functionParameterList())*  <FECHA_PARENTESES> (<PONTO_VIRGULA>)?
} */

void value() : {} {
    <NUMBER>
    | <TRUE>
    | <FALSE>
    | <NULL>
    | <UNDEFINED>
    | <STRING_LITERAL>
    | <IDENTIFIER> //| <ABRE_PARENTESES> value() <FECHA_PARENTESES>
}

int one_line() : {} {
    program()  { return 0; } | "end" { return 1; } | { return -1;}

}

void sum() : {} {
    term() ( ( <MAIS> | <MENOS> ) term() )*
}

void term() : {} {
    unary() ( ( <ASTERISCO> | <BARRA> ) unary() )*
}

void unary() : {} {
    <MENOS> element() | element()
}

void element() : {} {
    <CONSTANT> | <ABRE_PARENTESES> sum() <FECHA_PARENTESES>
}

void relationalOperator():{}{
   [(<MAIOR> | <MAIOR_IGUAL> | <MENOR> |<MENOS_IGUAL>| <IGUAL> | <DIFERENTE> |<ESTRITAMENTE_DIFERENTE>)]  value()
}

void logisticOperator():{}{
  <AND> | <OR>
}

void comparisonSimple():{}{
     (<NEGACAO>)* value() (relationalOperator())?
}

void conditional() : {}
{
    ifStatement() (LOOKAHEAD(2) elseIfStatements())* [elseStatement()]
}

void ifStatement() : {}
{
    <IF> <ABRE_PARENTESES> comparisonSimple() (logisticOperator() comparisonSimple() )* <FECHA_PARENTESES>
    <ABRE_CHAVE> (program())* <FECHA_CHAVE>
}

void elseIfStatements():{}{

    <ELSE> <IF> <ABRE_PARENTESES> comparisonSimple() (logisticOperator() comparisonSimple() )* <FECHA_PARENTESES>
     <ABRE_CHAVE> (program())*  <FECHA_CHAVE>
}

void elseStatement():{}{

    <ELSE> <ABRE_CHAVE> (program())* <FECHA_CHAVE>
}

void whileRepeat():{}{
    <WHILE>  <ABRE_PARENTESES>  comparisonSimple() (logisticOperator() comparisonSimple() )*  <FECHA_PARENTESES>
    <ABRE_CHAVE> (program())* <FECHA_CHAVE>
}

void importDeclaration():{} {
   <IMPORT> importClause() <FROM> <STRING_LITERAL> (<PONTO_VIRGULA>)?
}

void importClause():{}{
    <IDENTIFIER>
    | <ABRE_CHAVE> functionList() <FECHA_CHAVE>
}

void functionList():{} {
    <IDENTIFIER> ( <VIRGULA> <IDENTIFIER> )*
}