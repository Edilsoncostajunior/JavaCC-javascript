PARSER_BEGIN(MyNewGrammar)

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.JFileChooser;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;


public class MyNewGrammar
{
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter any expression from javascript :");
      try
      {
          if (MyNewGrammar.one_line() == 0){
            System.out.println("OK.");
            break;
          }else if(MyNewGrammar.one_line() == 1){
            System.out.println("Goodbye.");
            break;
          }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(MyNewGrammar)

// Espaços em branco
SKIP : {
  " " | "\r" | "\t" | "\n"
}

// Operadores
TOKEN : {
    <ATRIBUICAO: "=" > { System.out.println("Operador de Atribuicao: " + image); }
  | <MAIOR: ">" > { System.out.println("Operador de maior: " + image); }
  | <MENOR: "<" > { System.out.println("Operador de menor: " + image); }
  | <NEGACAO: "!" > { System.out.println("Operador de exclamação: " + image); }
  | <DOIS_PONTOS: ":" > { System.out.println("Operador de dois pontos: " + image); }
  | <IGUAL: "==" > { System.out.println("Operador de igual igual: " + image); }
  | <ESTRITAMENTE_IGUAL: "===" > { System.out.println("Operador de estritamente igual: " + image); }
  | <MENOR_IGUAL: "<=" > { System.out.println("Operador de menor igual: " + image); }
  | <MAIOR_IGUAL: ">=" > { System.out.println("Operador de maior igual: " + image); }
  | <DIFERENTE: "!=" > { System.out.println("Operador de diferente: " + image); }
  | <ESTRITAMENTE_DIFERENTE: "!==" > { System.out.println("Operador de estritamente diferente: " + image); }
  | <OR: "||" > { System.out.println("Operador de OR: " + image); }
  | <AND: "&&" > { System.out.println("Operador de AND: " + image); }
  | <INCREMENTO: "++" > { System.out.println("Operador de incremento: " + image); }
  | <DECREMENTO: "--" > { System.out.println("Operador de decremento: " + image); }
  | <MAIS: "+" > { System.out.println("Operador de mais: " + image); }
  | <MENOS: "-" > { System.out.println("Operador de menos: " + image); }
  | <ASTERISCO: "*" > { System.out.println("Operador de asterisco: " + image); }
  | <BARRA: "/" > { System.out.println("Operador de barra: " + image); }
  | <PORCENTO: "%" > { System.out.println("Operador de porcento: " + image); }
  | <MAIS_IGUAL: "+=" > { System.out.println("Operador de mais igual: " + image); }
  | <MENOS_IGUAL: "-=" > { System.out.println("Operador de menos igual: " + image); }
  | <ASTERISCO_IGUAL: "*=" > { System.out.println("Operador de asterisco igual: " + image); }
  | <BARRA_IGUAL: "/=" > { System.out.println("Operador de barra igual: " + image); }
  | <PORCENTO_IGUAL: "%=" > { System.out.println("Operador de porcento igual: " + image); }
}
// Delimitadores
TOKEN : {
    <ABRE_PARENTESES: "("> { System.out.println("Abre Parênteses: " + image); }
  | <FECHA_PARENTESES: ")"> { System.out.println("Fecha Parênteses: " + image); }
  | <ABRE_CHAVE: "{"> { System.out.println("Abre Chave: " + image); }
  | <FECHA_CHAVE: "}"> { System.out.println("Fecha Chave: " + image); }
  | <ABRE_COLCHETE: "["> { System.out.println("Abre Colchete: " + image); }
  | <FECHA_COLCHETE: "]"> { System.out.println("Fecha Colchete: " + image); }
  | <PONTO_VIRGULA: ";"> { System.out.println("Ponto e Vírgula: " + image); }
  | <VIRGULA: ","> { System.out.println("Vírgula: " + image); }
  | <PONTO: "."> { System.out.println("Ponto: " + image); }
}

// Palavras reservadas
TOKEN : {
    <CLASS: "class"> { System.out.println("Palavra Reservada: " + image); }
  | <NaN: "NaN"> { System.out.println("Palavra Reservada: " + image); }
  | <VOID: "void"> { System.out.println("Palavra Reservada: " + image); }
  | <RETURN: "return"> { System.out.println("Palavra Reservada: " + image); }
  | <STATIC: "static"> { System.out.println("Palavra Reservada: " + image); }
  | <IF: "if"> { System.out.println("Palavra Reservada: " + image); }
  | <ELSE: "else"> { System.out.println("Palavra Reservada: " + image); }
  | <TRUE: "true"> { System.out.println("Palavra Reservada: " + image); }
  | <FALSE: "false"> { System.out.println("Palavra Reservada: " + image); }
  | <CONSOLE: "console"> { System.out.println("Palavra Reservada: " + image); }
  | <LOG: "log"> { System.out.println("Palavra Reservada: " + image); }
  | <PROMPT: "prompt"> { System.out.println("Palavra Reservada: " + image); }
  | <WHILE: "while"> { System.out.println("Palavra Reservada: " + image); }
  | <BREAK: "break"> { System.out.println("Palavra Reservada: " + image); }
  | <CONTINUE: "continue"> { System.out.println("Palavra Reservada: " + image); }
  | <FUNCTION: "function"> { System.out.println("Palavra Reservada: " + image); }
}

// Tipos primitivos e literais
TOKEN : {
    <STRING_LITERAL: "\"" (~["\"","\\"] | "\\" ["\"","\\","b","f","n","r","t"])* "\"" |
                     "'" (~["'","\\"] | "\\" ["'","\\","b","f","n","r","t"])* "'"> { System.out.println("String Literal: " + image); }
  | <NUMBER: (["0"-"9"])+ ("." (["0"-"9"])+)? > { System.out.println("Número: " + image); }
  | <BIGINT: (["0"-"9"])+ "n"> { System.out.println("BigInt: " + image); }
  | <UNDEFINED: "undefined"> { System.out.println("Tipo Undefined: " + image); }
  | <NULL: "null"> { System.out.println("Palavra Reservada: " + image); }
  | <BOOLEAN: ("true" | "false")> { System.out.println("Tipo Booleano: " + image); }
  | <SYMBOL: "Symbol" "(" (~["\"","\\"] | "\\" ["\"","\\","b","f","n","r","t"])* ")"> { System.out.println("Tipo Symbol: " + image); }
}

// Declaração de variáveis
TOKEN : {
    <LET: "let"> { System.out.println("Declaração let: " + image); }
  | <VAR: "var"> { System.out.println("Declaração var: " + image); }
}

TOKEN:
{
		<IDENTIFIER:
		(<LETRA> | <ESPECIAL> ) (<LETRA> | <DIGITO> | <ESPECIAL> )* >
		{
		  System.out.println("Identificador: " +image);
		}

	|	<#LETRA: (["a"-"z", "A"-"Z"])>
	| 	<#DIGITO: ["0"-"9"]>
	|   <#ESPECIAL:(["_", "$", "ª", "º"])>
}


TOKEN : {
    <CONSTANT : (<DIGIT>)+>
  | <#DIGIT : ["0"-"9"]>
}
// Regras gramaticais
void program() : {} {
    consoleLog()  | variableDeclaration() | conditional()
}

void consoleLog() : {} {
    <CONSOLE> <PONTO> <LOG> <ABRE_PARENTESES> argumentList() <FECHA_PARENTESES>
}

void argumentList() : {} {
    (value() ( <VIRGULA> value() )*)?
}

void variableDeclaration() : {} {
    ( <LET> | <VAR> )?  assignment()  //(<PONTO_VIRGULA>)?
}

/*void functionDeclaration() : {} {
    <FUNCTION> <IDENTIFIER> <ABRE_PARENTESES> parameterList() <FECHA_PARENTESES> <ABRE_CHAVE> (assignment() | functionCall())* <FECHA_CHAVE>
}*/

void parameterList() : {} {
    ( <IDENTIFIER> ( <VIRGULA> <IDENTIFIER> )* )?
}

//void assignment() : {} {
//    <IDENTIFIER> <ATRIBUICAO> value() (<VIRGULA> assignment())* //| <IDENTIFIER> <ATRIBUICAO> value() <VIRGULA> assignment()
//}

void assignment() : {} {
      value() | <VIRGULA> assignment() //| <IDENTIFIER> <ATRIBUICAO> value() <VIRGULA> assignment()
}


void functionCall() : {} {
    <IDENTIFIER> <ABRE_PARENTESES> argumentList() <FECHA_PARENTESES> (<PONTO_VIRGULA>)?
}

void value() : {} {
    <NUMBER> | <BOOLEAN> | <NULL> | <UNDEFINED> | <STRING_LITERAL> | <IDENTIFIER> | <ABRE_PARENTESES> value() <FECHA_PARENTESES> //| functionDeclaration()
}

int one_line() : {} {
    program()  { return 0; } | <PONTO_VIRGULA> { return 1; }
}

void sum() : {} {
    term() ( ( <MAIS> | <MENOS> ) term() )*
}

void term() : {} {
    unary() ( ( <ASTERISCO> | <BARRA> ) unary() )*
}

void unary() : {} {
    <MENOS> element() | element()
}

void element() : {} {
    <CONSTANT> | <ABRE_PARENTESES> sum() <FECHA_PARENTESES>
}


void relationalOperator():{}{
<MAIOR> | <MAIOR_IGUAL> | <MENOR> |<MENOS_IGUAL>| <IGUAL> | <DIFERENTE> |<ESTRITAMENTE_DIFERENTE>
}

void logisticOperator():{}{
  <AND> | <OR>
}

void comparisonSimple():{}{
    value() relationalOperator() value()
}

void conditional():{}{
    <IF> <ABRE_PARENTESES> comparisonSimple() (logisticOperator() comparisonSimple() )* <FECHA_PARENTESES><ABRE_CHAVE> <FECHA_CHAVE>
}